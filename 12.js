JG.solution(12, () => {
  /* START
  Highly divisible triangular number
  Problem 12
  The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

  Let us list the factors of the first seven triangle numbers:

   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28
  We can see that 28 is the first triangle number to have over five divisors.

  What is the value of the first triangle number to have over five hundred divisors?
  END */

  let num = 1
  let n = 1 // n * n/2 + n/2 - triangular number formula
  const factorsRequired = 500
  while (numFactors(num) <= factorsRequired) {
    n++
    num += n
  }

  function numFactors (num) {
    let count = 0
    let squareRoot = Math.sqrt(num) // crucial for efficiency
    for (let i = 1; i <= squareRoot; i++) {
      if (num % i === 0) count += 2 // 2x because n * m = num
    }
    if (Number.isInteger(squareRoot)) count-- // don't count square root 2x
    return count
  }

  return num
})
